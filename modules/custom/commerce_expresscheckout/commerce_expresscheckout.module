<?php
/*
	review panes commerce_checkout_review_pane_checkout_form()

*/


/* 
	Instance of hook_menu
	Creates our path for the one page checkout
	@todo can we override the default?
*/
function commerce_expresscheckout_menu() {
	$items = array(); 
//	$items['checkout/%/express'] = array( 
	$items['checkout/%'] = array( 
//	$items['expresscheckout/%'] = array( 
      'title' => 'Express checkout', 
      'weight' => 20,
      'description' => t('Checkout quickly on one page.'), 
      'page callback' => 'drupal_get_form', 
//		inherited from checkout if path is checkout/%/express
//      'access' => user_access('access checkout'),
    'access arguments' => array('access checkout'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'page arguments' => array('commerce_expresscheckout_form', 1),
	);
  
	return $items;

}


/*
	Implements hook_form
	Creates a form for our checkout
*/
function commerce_expresscheckout_form($form, &$form_state, $order_id) {
//	if we commerce_order load then we redirect away.
	$order = commerce_order_load($order_id);
//	krumo($order);
//	$order = $order_id;
//	$order = null;
	$pages = commerce_checkout_pages();
	$panes = commerce_checkout_panes(array('enabled' => TRUE));
$debug = TRUE;
//	iterate over each of the pages (pane sets) looking for panes that belong in it
	foreach ($pages as $page_id => $checkout_page) {
//	create fieldsets
		$form[$page_id . '_fieldset'] = array(
			'#title' => t($checkout_page['title']),
			// The prefix/suffix provide the div that we're replacing, named by
			// #ajax['wrapper'] above.
			'#prefix' => '<div id="' . $page_id . '_div">',
			'#suffix' => '</div>',
			'#type' => 'fieldset',
			'#count' => 0,	//	used to store the number of panes herein
			'#description' => t($checkout_page['help']),
		);
		
		if ( $debug ) {
			$form[$page_id . '_fieldset']['#title'] .= " [" . $page_id . "]";
		}

		foreach ($panes as $pane_id => $checkout_pane_local) {
//			krumo($checkout_pane_local);
//	the redirect panes cause redirection - we can't have that
			if ( strpos($pane_id, 'redirect') )
				continue;
			if ( $checkout_pane_local['page'] == $page_id ) {
				$form[$page_id . '_fieldset']['#count']++;
				
				$callback = commerce_checkout_pane_callback($checkout_pane_local, 'checkout_form');
        		$pane_data = $callback($form, $form_state, $checkout_pane_local, $order);
//	from commerce_checkout.checkout_pane.inc
//	Only display the pane if there is data in the pane.
				if (!empty($pane_data)) {
				// Add a row for it in the review data.
					$form[$page_id . '_fieldset'][$page_id . '_' . $pane_id . '_fieldset'] = array(
						'#title' => t($checkout_pane_local['title']),
						'data' => $pane_data,
						'#prefix' => '<div id="' . $pane_id . '_div">',
						'#suffix' => '</div>',
						'#type' => 'fieldset',
						'#collapsed' => TRUE,
						'#collapsible' => TRUE,
						//'#description' => t($checkout_pane_local['help']),
					);
					if ( $debug ) {
						$form[$page_id . '_fieldset'][$page_id . '_' . $pane_id . '_fieldset']['#title'] .= " [" . $pane_id . "]";
					}
				}
			}
		}
//	clean up fieldsets that aren't required
		if ( $form[$page_id . '_fieldset']['#count'] ) {
			$form[$page_id . '_fieldset']['#classes'][] = "panes-" . $form[$page_id . '_fieldset']['#count'];
		} else {
			unset($form[$page_id . '_fieldset']);
		}
		
	}
		
	_commerce_expresscheckout_form_extend(&$form);

	return $form;
}


/*
	Implements hook_form_validate
*/
function commerce_expresscheckout_form_validate() {
	
}


/*
	Implements hook_form_submit
*/
function commerce_expresscheckout_form_submit() {
	
}

/*
	Settings
	- Override default checkout or not
*/


/*
 *	Modify incoming form with ajaxy goodness and additional fields as required
 */
function _commerce_expresscheckout_form_extend(&$form) {
//	krumo($form);
//	add use different address checkbox for billing shipping	
	$container_id = "checkout_customer_profile_billing_fieldset";
	$field = array('shipping_same' => array(
    	'#title' => t('Ship to a different address'),
    	'#type' => 'checkbox',		
	));
	_commerce_expresscheckout_form_add_field(&$form, $container_id, $field);

	foreach ( commerce_checkout_pages() as $page_id=>$page_data ) {
		$container_id = $page_id . "_fieldset";
		$field = array($page_id . '_next' => array(
	    	'#value' => t('Next'),
	    	'#type' => 'button',		
		));
		if ( $page_id == 'complete' ) {
			$field[$page_id . '_next']['#value'] = t("Finished");
		}
		_commerce_expresscheckout_form_add_field(&$form, $container_id, $field);		
	};
	
	_commerce_expresscheckout_form_add_ajax_callback(&$form, 'shipping_same', 'customer_profile_shipping');
//	_commerce_expresscheckout_form_add_ajax_callback(&$form, 'shipping_same', 'review');
	
	
/*
	$form['submit'] = array(
    	'#type' => 'submit',
    	'#value' => t('Submit'),
		'#form_id' => "commerce_expresscheckout_form",
	);
*/

}


function _commerce_expresscheckout_customer_profile_shipping_callback($form, $form_state) {
	$form['checkout_fieldset']['checkout_customer_profile_shipping_fieldset']['#collapsed'] = FALSE;
	$form['checkout_fieldset']['checkout_customer_profile_shipping_fieldset']['#collapsible'] = FALSE;
	$form['checkout_fieldset']['checkout_customer_profile_shipping_fieldset']['#title'] .= " *";
	$form['checkout_fieldset']['checkout_customer_profile_shipping_fieldset']['data']['commerce_customer_address']['und'][0]['name_block']['name_line']['#value'] = "SILLY";
	return $form['checkout_fieldset']['checkout_customer_profile_shipping_fieldset'];
}


function _commerce_expresscheckout_review_callback($form, $form_state) {
	return $form['review_fieldset'];
}


function _commerce_expresscheckout_form_add_ajax_callback(&$form, $trigger_id, $container_id) {
	foreach ( $form as $id=>&$fields ) {
		if ( $id == $trigger_id ) {
			$fields['#ajax'] = array(
		      'callback' => '_commerce_expresscheckout_' . $container_id .'_callback',
		      'wrapper' => $container_id . '_div',
		      'method' => 'replace',
		      'effect' => 'fade',
		    );
			return;
		}
		if ( is_array($fields) && array_key_exists('#type', $fields) ) {
			if ( $fields['#type'] == 'fieldset' ) {
				_commerce_expresscheckout_form_add_ajax_callback(&$form[$id], $trigger_id, $container_id);
			}
		}
	}
}


function _commerce_expresscheckout_form_add_field(&$form, $container_id, $field) {
	foreach ( $form as $id=>&$fields ) {
		if ( $id == $container_id ) {
			$fields = array_merge_recursive($fields, $field);
//			$fields["#collapsed"] = FALSE;
			return;
		}
		if ( is_array($fields) && array_key_exists('#type', $fields) ) {
			if ( $fields['#type'] == 'fieldset' ) {
				_commerce_expresscheckout_form_add_field(&$form[$id], $container_id, $field);
			}
		}
	}
}
